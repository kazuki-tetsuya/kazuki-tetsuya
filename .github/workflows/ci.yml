name: CI

on:
  push:
    branches: [main]
    paths-ignore:
      - "**.md"
      - ".gitignore"
      - "LICENSE"
      - "**.{yml,yaml,pyc}"
      - "**/__pycache__/**"
      - "**.log"
      - "venv/**"
      - "**.env"
      - "{.vscode,.idea}/**"
      - "doc/**"
      - "**.template"
      - "CHANGELOG"
  pull_request_target:
    types: [labeled, opened, reopened, synchronize, edited]
    branches: [main]
    paths-ignore:
      - "**.md"
      - ".gitignore"
      - "LICENSE"
      - "**.{yml,yaml,pyc}"
      - "**/__pycache__/**"
      - "**.log"
      - "venv/**"
      - "**.env"
      - "{.vscode,.idea}/**"
      - "doc/**"
      - "**.template"
      - "CHANGELOG"

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

permissions: write-all

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  validate-pr-title:
    name: Validate PR Title
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request_target'
    steps:
      - uses: ytanikin/PRConventionalCommits@1.1.0
        with:
          task_types: '["feat","fix","docs","test","ci","refactor","perf","chore","revert","build","style"]'
          custom_labels: '{"feat":"enhancement","fix":"bug","docs":"documentation","test":"enhancement","ci":"enhancement","refactor":"enhancement","perf":"enhancement","chore":"enhancement","revert":"bug","build":"enhancement","style":"enhancement"}'
          add_label: true

  check-signed-commits:
    name: Verify Commit Signatures
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request_target'
    steps:
      - uses: 1Password/check-signed-commits-action@v1
        with:
          comment: |
            ## Unsigned Commits Found
            This PR contains commits without GPG signatures. Signed commits ensure code authenticity.
            ### Resolution Steps:
            1. [Create GPG key](https://docs.github.com/en/authentication/managing-commit-signature-verification/generating-a-new-gpg-key)
            2. [Add key to GitHub](https://docs.github.com/en/authentication/managing-commit-signature-verification/adding-a-gpg-key-to-your-github-account)
            3. [Enable commit signing](https://docs.github.com/en/authentication/managing-commit-signature-verification/signing-commits)
            Need assistance? See [GitHub's guide](https://docs.github.com/en/authentication/managing-commit-signature-verification/about-commit-signature-verification)

  changed_files:
    runs-on: ubuntu-latest
    name: Detect File Changes
    outputs:
      python_changed: ${{ steps.changed-files.outputs.python_any_changed }}
      config_changed: ${{ steps.changed-files.outputs.config_any_changed }}
    steps:
      - uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}
      - id: changed-files
        uses: tj-actions/changed-files@v45.0.7
        with:
          files_yaml: |
            python: ['**.py', 'requirements*.txt', 'pyproject.toml', 'setup.py']
            docs: ['**.md', 'doc/**']
            config: ['**.{yml,yaml,json,toml,ini}', '.env*']
          skip_initial_fetch: true
          diff_relative: true
          exclude_submodules: true
          safe_output: true
          write_output_files: true
          output_dir: .github/outputs/changed-files
          json: true
          fail_on_initial_diff_error: true

      - if: always()
        uses: actions/github-script@v7.0.1
        with:
          script: |
            const {owner, repo} = context.repo;
            const stats = {
              new: '${{ steps.changed-files.outputs.added_files_count }}',
              modified: '${{ steps.changed-files.outputs.modified_files_count }}',
              deleted: '${{ steps.changed-files.outputs.deleted_files_count }}',
              renamed: '${{ steps.changed-files.outputs.renamed_files_count }}',
              total: '${{ steps.changed-files.outputs.all_changed_and_modified_files_count }}'
            };
            const categories = {
              python: '${{ steps.changed-files.outputs.python_any_changed }}',
              docs: '${{ steps.changed-files.outputs.docs_any_changed }}',
              config: '${{ steps.changed-files.outputs.config_any_changed }}'
            };
            const report = `## Change Analysis\n**Status**: ${{ job.status }}\n\n### Statistics\n${
              Object.entries(stats).map(([k,v]) => `- ${k}: ${v}`).join('\n')
            }\n\n### Categories\n${
              Object.entries(categories).map(([k,v]) => `- ${k}: ${v}`).join('\n')
            }\n\n[Full Report](https://github.com/${owner}/${repo}/actions/runs/${context.runId})`;
            await github.rest[context.eventName === 'pull_request_target' ? 'issues' : 'repos']
              [context.eventName === 'pull_request_target' ? 'createComment' : 'createCommitComment']({
                owner,
                repo,
                body: report,
                ...(context.eventName === 'pull_request_target' ? {issue_number: context.payload.pull_request.number} : {commit_sha: context.sha})
              });

  lint:
    name: Code Quality Check
    needs: [check-signed-commits, changed_files, validate-pr-title]
    if: needs.changed_files.outputs.python_changed == 'true' || github.event.action != 'labeled' || github.event.label.name == 'pre-commit ci run'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}
      - uses: super-linter/super-linter@v7.2.1
        env:
          GITHUB_TOKEN: ${{ github.token }}
          VALIDATE_ALL_CODEBASE: ${{ github.event_name != 'pull_request_target' }}
          DEFAULT_BRANCH: main
          VALIDATE_PYTHON_{BLACK,RUFF,ISORT,PYLINT,MYPY}: true
          VALIDATE_{YAML,JSON,MARKDOWN,GITHUB_ACTIONS,GITLEAKS}: true
          FIX_PYTHON_{BLACK,ISORT,RUFF}: true
          FIX_YAML_PRETTIER: true
          FILTER_REGEX_EXCLUDE: ".*\\.pyc$|.*/__pycache__/.*|.*/\\.git/.*|.*/\\.vscode/.*|.*/\\.idea/.*|.*/venv/.*|.*/doc/.*"
          LOG_LEVEL: INFO
          IGNORE_{GITIGNORED,GENERATED}_FILES: true
          SAVE_SUPER_LINTER_{SUMMARY,OUTPUT}: true
          ENABLE_GITHUB_ACTIONS_STEP_SUMMARY: true
          SUPER_LINTER_OUTPUT_DIRECTORY_NAME: super-linter-output
          CREATE_LOG_FILE: true
          MULTI_STATUS: true

      - uses: wemake-services/wemake-python-styleguide@1.0.0
        with:
          reporter: github-pr-review
          path: .
          filter_mode: added
          fail_workflow: false
          options: >-
            --max-line-complexity=14 --max-jones-score=12 --max-cognitive-score=12
            --max-cognitive-average=8 --max-imports=12 --max-imported-names=50
            --max-module-members=7 --max-methods=7 --max-expressions=9
            --max-local-variables=5 --max-arguments=5 --max-returns=5
            --max-attributes=6 --max-awaits=5 --max-try-body-length=1
            --max-module-expressions=7 --max-function-expressions=4
            --max-base-classes=3 --max-decorators=5 --max-string-usages=3
            --max-asserts=5 --max-access-level=4 --max-raises=3
            --max-except-exceptions=3 --max-call-level=3
            --max-annotation-complexity=3 --max-import-from-members=8
            --max-tuple-unpack-length=4 --max-type-params=6
            --max-match-subjects=7 --max-match-cases=7
            --nested-classes-whitelist=Meta,Params,Config --min-name-length=2
            --max-name-length=45 --max-noqa-comments=10 --show-violation-links=False

      - uses: stefanzweifel/git-auto-commit-action@v5.1.0
        if: always()
        with:
          commit_message: "style: auto-fix code style issues"
          commit_options: --no-verify
          file_pattern: "**/*"
          add_options: -u
          push_options: --force
          skip_dirty_check: false
          skip_fetch: true
          create_branch: false

      - if: always()
        uses: actions/github-script@v7.0.1
        with:
          script: |
            const fs = require('fs');
            const {owner, repo} = context.repo;
            const linterSummary = fs.existsSync('super-linter-output/super-linter-summary.md')
              ? fs.readFileSync('super-linter-output/super-linter-summary.md', 'utf8')
              : '*Summary unavailable*';
            const report = `## Code Quality Report\n\n### Status: ${{ job.status }}\n\n### Summary\n${linterSummary}\n\n### Info\n- Auto-fixes: ${
              process.env.FIX_PYTHON_BLACK === 'true' ? 'on' : 'off'
            }\n\n[Full Report](https://github.com/${owner}/${repo}/actions/runs/${context.runId})\n\n---\n<sub>Generated at ${new Date().toISOString()}</sub>`;
            await github.rest[context.eventName === 'pull_request_target' ? 'issues' : 'repos']
              [context.eventName === 'pull_request_target' ? 'createComment' : 'createCommitComment']({
                owner,
                repo,
                body: report,
                ...(context.eventName === 'pull_request_target' ? {issue_number: context.payload.pull_request.number} : {commit_sha: context.sha})
              });

  security:
    name: Security Scan
    needs: changed_files
    if: needs.changed_files.outputs.python_changed == 'true' || needs.changed_files.outputs.config_changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.2.2
      - uses: actions/dependency-review-action@v4.5.0
        with:
          fail-on-severity: moderate
          fail-on-scopes: runtime, development
          vulnerability-check: true
          license-check: true
          comment-summary-in-pr: on-failure
          show-openssf-scorecard: true
          warn-on-openssf-scorecard-level: 5

      - if: always()
        uses: actions/github-script@v7.0.1
        with:
          script: |
            const {owner, repo} = context.repo;
            await github.rest[context.eventName === 'pull_request_target' ? 'issues' : 'repos']
              [context.eventName === 'pull_request_target' ? 'createComment' : 'createCommitComment']({
                owner,
                repo,
                body: `## Security Report\n\n**Status**: ${{ job.status }}\n\n[Full Report](https://github.com/${owner}/${repo}/actions/runs/${context.runId})`,
                ...(context.eventName === 'pull_request_target' ? {issue_number: context.payload.pull_request.number} : {commit_sha: context.sha})
              });

  test:
    name: Python ${{ matrix.python-version }} Tests
    needs: [lint, security, changed_files]
    if: needs.changed_files.outputs.python_changed == 'true'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
    steps:
      - uses: actions/checkout@v4.2.2
      - uses: actions/setup-python@v5.4.0
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
      - uses: actions/cache@v4.2.0
        id: cache-deps
        with:
          path: |
            ~/.cache/pip
            ~/.local/lib/python*/site-packages
            .tox
            **/__pycache__
            **/*.pyc
          key: ${{ runner.os }}-py${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt', 'pyproject.toml', 'tox.ini') }}
          restore-keys: |
            ${{ runner.os }}-py${{ matrix.python-version }}-
            ${{ runner.os }}-
          enableCrossOsArchive: true
          fail-on-cache-miss: false
          lookup-only: false

      - if: steps.cache-deps.outputs.cache-hit != 'true'
        run: pip install -U pip tox tox-gh-actions

      - run: tox
        env:
          PYTHON_VERSION: ${{ matrix.python-version }}
          SEGMENT_DOWNLOAD_TIMEOUT_MINS: "15"

      - if: always()
        uses: actions/github-script@v7.0.1
        with:
          script: |
            const {owner, repo} = context.repo;
            await github.rest[context.eventName === 'pull_request_target' ? 'issues' : 'repos']
              [context.eventName === 'pull_request_target' ? 'createComment' : 'createCommitComment']({
                owner,
                repo,
                body: `## Python ${matrix.python-version} Tests\n\n**Status**: ${{ job.status }}\n\n[Full Report](https://github.com/${owner}/${repo}/actions/runs/${context.runId})`,
                ...(context.eventName === 'pull_request_target' ? {issue_number: context.payload.pull_request.number} : {commit_sha: context.sha})
              });
